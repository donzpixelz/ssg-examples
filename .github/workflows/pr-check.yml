name: PR Check (ssg-examples)

on:
  pull_request:
    branches: ["main"]
    paths-ignore:
      - "**/*.md"
      - "LICENSE"
  push:
    branches-ignore:
      - "main"
    paths-ignore:
      - "**/*.md"
      - "LICENSE"
  workflow_dispatch: {}

concurrency:
  group: pr-check-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  # Tag used only for PR/feature test builds (not pushed)
  DOCKER_IMAGE: chipsterz/ssg-examples:pr-${{ github.sha }}
  TF_IN_AUTOMATION: "true"
  TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache

jobs:
  checks:
    name: Lint/Validate (Terraform, Nginx, Docker)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Detect changed paths
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            terraform:
              - 'terraform/**.tf'
              - 'terraform/**.tfvars'
              - 'terraform/**.lock.hcl'
            nginx:
              - 'nginx/**'
            docker:
              - 'Dockerfile'
              - '.dockerignore'
            app:
              - 'app/**'
            workflow:
              - '.github/workflows/pr-check.yml'
              - '.github/workflows/deploy.yml'

      # -------- Terraform checks (no backend, safe for PRs/feature branches) --------
      - name: Setup Terraform
        if: steps.changes.outputs.terraform == 'true' || steps.changes.outputs.workflow == 'true'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Cache Terraform plugin directory
        if: steps.changes.outputs.terraform == 'true' || steps.changes.outputs.workflow == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.terraform.d/plugin-cache
          key: tf-${{ runner.os }}-${{ hashFiles('terraform/**/*.tf*') }}

      - name: Terraform fmt (check only)
        if: steps.changes.outputs.terraform == 'true' || steps.changes.outputs.workflow == 'true'
        working-directory: terraform
        run: terraform fmt -check -recursive

      - name: Terraform init (no backend)
        if: steps.changes.outputs.terraform == 'true' || steps.changes.outputs.workflow == 'true'
        working-directory: terraform
        run: terraform init -backend=false

      - name: Terraform validate
        if: steps.changes.outputs.terraform == 'true' || steps.changes.outputs.workflow == 'true'
        working-directory: terraform
        run: terraform validate

      # -------- Nginx config sanity test (only if file exists/changed) --------
      - name: Nginx config test
        if: steps.changes.outputs.nginx == 'true' || steps.changes.outputs.workflow == 'true'
        run: |
          set -euo pipefail
          if [ -f nginx/99-no-cache.conf ]; then
            docker run --rm \
              -v "$PWD/nginx/99-no-cache.conf":/etc/nginx/conf.d/99-no-cache.conf:ro \
              nginx:alpine nginx -t
          else
            echo "No nginx/99-no-cache.conf present; skipping test."
          fi

      # -------- Docker build test (only if Dockerfile changed/present) --------
      - name: Docker build (optional)
        if: steps.changes.outputs.docker == 'true' || steps.changes.outputs.app == 'true' || steps.changes.outputs.workflow == 'true'
        run: |
          set -euo pipefail
          if [ -f Dockerfile ]; then
            docker build -t "${DOCKER_IMAGE}" .
          else
            echo "No Dockerfile found; skipping Docker build."
          fi

      # -------- Summary / early exit when nothing relevant changed --------
      - name: Nothing to check?
        if: |
          steps.changes.outputs.terraform != 'true' &&
          steps.changes.outputs.nginx != 'true' &&
          steps.changes.outputs.docker != 'true' &&
          steps.changes.outputs.app != 'true' &&
          steps.changes.outputs.workflow != 'true'
        run: echo "No relevant changes for PR/feature checks."
