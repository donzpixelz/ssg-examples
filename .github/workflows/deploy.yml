name: Deploy static app to EC2 (OIDC + Instance ID)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-2
  REMOTE_DIR: /var/www/ssg-examples
  REMOTE_USER: ec2-user

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: ssg-examples-${{ github.run_id }}

      - name: Resolve public IP from EC2_INSTANCE_ID
        id: host
        shell: bash
        run: |
          test -n "${{ secrets.EC2_INSTANCE_ID }}" || { echo "Missing EC2_INSTANCE_ID secret"; exit 1; }
          host="$(aws ec2 describe-instances \
            --region "${AWS_REGION}" \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)"
          if [ -z "$host" ] || [ "$host" = "None" ]; then
            echo "Instance has no public IP. Ensure it has one or set up a bastion." >&2
            exit 1
          fi
          echo "host=${host}" >> "$GITHUB_OUTPUT"
          echo "Resolved host: $host"

      - name: Prepare SSH key
        shell: bash
        run: |
          test -n "${{ secrets.AWS_EC2_SSH_KEY }}" || { echo "Missing AWS_EC2_SSH_KEY secret (PEM private key)"; exit 1; }
          echo "${{ secrets.AWS_EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem
          mkdir -p ~/.ssh
          ssh-keyscan -H "${{ steps.host.outputs.host }}" >> ~/.ssh/known_hosts

      # If you build locally to a folder, add that build here (npm/yarn etc.)
      # - name: Build static site
      #   run: |
      #     npm ci
      #     npm run build

      - name: Deploy files to EC2 (rsync)
        shell: bash
        run: |
          LOCAL_PATH="./public"
          if [ ! -d "$LOCAL_PATH" ]; then
            LOCAL_PATH="./app"
          fi
          echo "Uploading $LOCAL_PATH -> ${REMOTE_USER}@${{ steps.host.outputs.host }}:${REMOTE_DIR}"
          ssh -i key.pem "${REMOTE_USER}@${{ steps.host.outputs.host }}" "sudo mkdir -p '${REMOTE_DIR}' && sudo chown -R ${REMOTE_USER}:${REMOTE_USER} '${REMOTE_DIR}'"
          rsync -az --delete -e "ssh -i key.pem" "${LOCAL_PATH}/" "${REMOTE_USER}@${{ steps.host.outputs.host }}:${REMOTE_DIR}/"

      - name: (optional) Post-deploy hook
        if: always()
        run: |
          # Example: restart nginx
          # ssh -i key.pem "${REMOTE_USER}@${{ steps.host.outputs.host }}" "sudo systemctl reload nginx"
          echo "Deployment complete."
