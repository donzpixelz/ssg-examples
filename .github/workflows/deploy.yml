name: Deploy static app to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-2
      EC2_KEY_NAME: simple-web-demo-key
      WEB_ROOT: /opt/ssg-examples/app
      CONF_FILE: /opt/ssg-examples/nginx/99-no-cache.conf
      CONF_SERVER: /opt/ssg-examples/nginx/default.conf
      CONTAINER: ssg-examples

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Configure AWS via OIDC (no static keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::953331331353:role/GitHubActions-ssg-examples
          aws-region: ${{ env.AWS_REGION }}

      - name: Find EC2 instance/host/SGs (by key-name)
        id: ec2
        shell: bash
        run: |
          set -euo pipefail
          INSTANCE_ID=$(aws ec2 describe-instances             --filters "Name=key-name,Values=${EC2_KEY_NAME}" "Name=instance-state-name,Values=running"             --query "Reservations[].Instances[].InstanceId" --output text | head -n1)
          if [[ -z "$INSTANCE_ID" || "$INSTANCE_ID" == "None" ]]; then
            echo "No running instance found with key-name=${EC2_KEY_NAME} in ${AWS_REGION}"
            exit 1
          fi
          HOST=$(aws ec2 describe-instances --instance-ids "$INSTANCE_ID"             --query "Reservations[].Instances[].PublicDnsName" --output text)
          SG_IDS=$(aws ec2 describe-instances --instance-ids "$INSTANCE_ID"             --query "Reservations[].Instances[].SecurityGroups[].GroupId" --output text)
          {
            echo "instance_id=$INSTANCE_ID"
            echo "host=$HOST"
            echo "sg_ids=$SG_IDS"
          } >> "$GITHUB_OUTPUT"

      - name: Authorize runner IP for SSH (temp)
        id: sshopen
        shell: bash
        run: |
          set -euo pipefail
          RUNNER_IP=$(curl -s https://checkip.amazonaws.com | tr -d '\n')
          for SG in ${{ steps.ec2.outputs.sg_ids }}; do
            aws ec2 authorize-security-group-ingress               --group-id "$SG"               --ip-permissions "IpProtocol=tcp,FromPort=22,ToPort=22,IpRanges=[{CidrIp=${RUNNER_IP}/32,Description=gha-temp}]"               || true
          done
          echo "runner_ip=$RUNNER_IP" >> "$GITHUB_OUTPUT"

      - name: Prepare server (Docker + paths)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ steps.ec2.outputs.host }}
          username: ec2-user
          key: ${{ secrets.AWS_EC2_SSH_KEY }}
          script: |
            set -euxo pipefail
            WEB_ROOT="${{ env.WEB_ROOT }}"
            CONF_FILE="${{ env.CONF_FILE }}"
            CONF_SERVER="${{ env.CONF_SERVER }}"
            if ! command -v docker >/dev/null 2>&1; then
              curl -fsSL https://get.docker.com | sh
            fi
            sudo systemctl start docker || sudo service docker start || true
            for i in {1..10}; do
              sudo docker info >/dev/null 2>&1 && break
              sleep 1
            done
            sudo docker info >/dev/null
            sudo mkdir -p "${WEB_ROOT}"
            sudo mkdir -p "$(dirname "${CONF_FILE}")"
            sudo mkdir -p "$(dirname "${CONF_SERVER}")"
            sudo chown -R "$USER:$USER" /opt/ssg-examples

      - name: Upload nginx/99-no-cache.conf
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ steps.ec2.outputs.host }}
          username: ec2-user
          key: ${{ secrets.AWS_EC2_SSH_KEY }}
          source: "nginx/99-no-cache.conf"
          target: "${{ env.CONF_FILE }}"
          overwrite: true

      - name: Upload nginx/default.conf
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ steps.ec2.outputs.host }}
          username: ec2-user
          key: ${{ secrets.AWS_EC2_SSH_KEY }}
          source: "nginx/default.conf"
          target: "${{ env.CONF_SERVER }}"
          overwrite: true

      - name: Upload app/ (flatten)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ steps.ec2.outputs.host }}
          username: ec2-user
          key: ${{ secrets.AWS_EC2_SSH_KEY }}
          source: "app/**"
          target: "${{ env.WEB_ROOT }}/"
          strip_components: 1

      - name: Recreate container (nginx + confs) and verify
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ steps.ec2.outputs.host }}
          username: ec2-user
          key: ${{ secrets.AWS_EC2_SSH_KEY }}
          script: |
            set -euxo pipefail
            WEB_ROOT="${{ env.WEB_ROOT }}"
            CONF_FILE="${{ env.CONF_FILE }}"
            CONF_SERVER="${{ env.CONF_SERVER }}"
            CONTAINER="${{ env.CONTAINER }}"

            sudo docker rm -f "${CONTAINER}" >/dev/null 2>&1 || true
            sudo docker run -d --name "${CONTAINER}"               -p 80:80               -v "${WEB_ROOT}":/usr/share/nginx/html:ro               -v "${CONF_FILE}":/etc/nginx/conf.d/99-no-cache.conf:ro               -v "${CONF_SERVER}":/etc/nginx/conf.d/default.conf:ro               --restart unless-stopped               nginx:alpine

            sleep 2
            sudo docker exec "${CONTAINER}" nginx -t
            sudo docker ps --filter "name=${CONTAINER}"
            sudo docker exec "${CONTAINER}" sh -lc 'wget -qO- http://127.0.0.1/ | head -n 10 || true'

      - name: Ensure SG allows TCP/80 (and try to remove 8080)
        shell: bash
        run: |
          set -euo pipefail
          for SG in ${{ steps.ec2.outputs.sg_ids }}; do
            aws ec2 authorize-security-group-ingress               --group-id "$SG"               --ip-permissions 'IpProtocol=tcp,FromPort=80,ToPort=80,IpRanges=[{CidrIp=0.0.0.0/0,Description=web-80}]'               || true
            aws ec2 revoke-security-group-ingress               --group-id "$SG"               --ip-permissions 'IpProtocol=tcp,FromPort=8080,ToPort=8080,IpRanges=[{CidrIp=0.0.0.0/0}]'               || true
          done

      - name: Revoke runner IP for SSH (cleanup)
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          RUNNER_IP="${{ steps.sshopen.outputs.runner_ip }}"
          if [[ -n "$RUNNER_IP" ]]; then
            for SG in ${{ steps.ec2.outputs.sg_ids }}; do
              aws ec2 revoke-security-group-ingress                 --group-id "$SG"                 --ip-permissions "IpProtocol=tcp,FromPort=22,ToPort=22,IpRanges=[{CidrIp=${RUNNER_IP}/32,Description=gha-temp}]"                 || true
            done
          fi

      - name: Smoke test (port 80)
        env:
          HOST: ${{ steps.ec2.outputs.host }}
        run: |
          set -euo pipefail
          curl -v --retry 4 --retry-connrefused --retry-delay 3 --max-time 20             -fsS "http://${HOST}/?nocache=$(date +%s)" >/dev/null
