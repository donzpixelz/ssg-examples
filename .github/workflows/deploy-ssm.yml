name: Deploy static app to EC2 via SSM (OIDC + Instance ID)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-2
  REMOTE_DIR: /var/www/ssg-examples
  ARTIFACT_PREFIX: ssg-examples/artifacts

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: ssg-examples-${{ github.run_id }}

      - name: Package static site (tar.gz)
        id: pack
        run: |
          set -e
          LOCAL_PATH="./public"; [ -d "$LOCAL_PATH" ] || LOCAL_PATH="./app"
          [ -d "$LOCAL_PATH" ] || { echo "No ./public or ./app to deploy"; exit 1; }
          mkdir -p artifact
          tar -C "$LOCAL_PATH" -czf artifact/site.tgz .
          echo "path=artifact/site.tgz" >> "$GITHUB_OUTPUT"

      - name: Compute artifacts bucket
        id: bucket
        run: |
          ACCOUNT_ID="$(aws sts get-caller-identity --query Account -o text)"
          echo "name=ssg-examples-artifacts-${ACCOUNT_ID}-${AWS_REGION}" >> "$GITHUB_OUTPUT"

      - name: Upload artifact to S3
        id: upload
        run: |
          KEY="${{ env.ARTIFACT_PREFIX }}/${{ github.sha }}.tgz"
          aws s3 cp "${{ steps.pack.outputs.path }}" "s3://${{ steps.bucket.outputs.name }}/${KEY}"
          echo "key=${KEY}" >> "$GITHUB_OUTPUT"

      - name: Generate pre-signed URL
        id: presign
        run: |
          URL="$(aws s3 presign "s3://${{ steps.bucket.outputs.name }}/${{ steps.upload.outputs.key }}" --expires-in 3600)"
          echo "url=${URL}" >> "$GITHUB_OUTPUT"

      - name: Resolve Instance ID
        id: inst
        run: |
          test -n "${{ secrets.EC2_INSTANCE_ID }}" || { echo "Missing EC2_INSTANCE_ID secret"; exit 1; }
          echo "iid=${{ secrets.EC2_INSTANCE_ID }}" >> "$GITHUB_OUTPUT"

      - name: Deploy via SSM (no SSH/port 22)
        run: |
          set -e
          IID="${{ steps.inst.outputs.iid }}"
          PRESIGNED="${{ steps.presign.outputs.url }}"
          REMOTE_DIR="${{ env.REMOTE_DIR }}"

          COMMAND=$(cat <<'EOS'
          set -e
          sudo mkdir -p "$REMOTE_DIR"
          TMP="/tmp/site.tgz"
          curl -fsSL "$PRESIGNED" -o "$TMP"
          # Clean the target dir so deletes are reflected
          sudo find "$REMOTE_DIR" -mindepth 1 -maxdepth 1 -exec rm -rf {} +
          sudo tar -xzf "$TMP" -C "$REMOTE_DIR"
          sudo rm -f "$TMP"
          sudo chown -R ec2-user:ec2-user "$REMOTE_DIR"
          # sudo systemctl reload nginx || true
          EOS
          )

          CMD_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids "$IID" \
            --parameters commands="$COMMAND",executionTimeout="600",workingDirectory="/home/ec2-user",envVariables="[{\"name\":\"REMOTE_DIR\",\"value\":\"$REMOTE_DIR\"},{\"name\":\"PRESIGNED\",\"value\":\"$PRESIGNED\"}]" \
            --comment "ssg-examples deploy $GITHUB_SHA" \
            --query "Command.CommandId" -o text)

          for i in $(seq 1 30); do
            STATUS="$(aws ssm get-command-invocation --command-id "$CMD_ID" --instance-id "$IID" --query Status -o text || true)"
            echo "SSM status: $STATUS"
            case "$STATUS" in
              Success) exit 0 ;;
              Failed|Cancelled|TimedOut) echo "SSM command $STATUS"; aws ssm get-command-invocation --command-id "$CMD_ID" --instance-id "$IID" --query StandardErrorContent -o text || true; exit 1 ;;
              *) sleep 5 ;;
            esac
          done
          echo "SSM command did not finish in time"; exit 1
