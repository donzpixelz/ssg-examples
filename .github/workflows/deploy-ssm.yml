name: Deploy static app to EC2 via SSM (OIDC + Instance ID)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-2
  REMOTE_DIR: /var/www/ssg-examples
  ARTIFACT_PREFIX: ssg-examples/artifacts

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: ssg-examples-${{ github.run_id }}

      - name: Package static site (tar.gz)
        id: pack
        run: |
          set -e
          LOCAL_PATH="./public"; [ -d "$LOCAL_PATH" ] || LOCAL_PATH="./app"
          [ -d "$LOCAL_PATH" ] || { echo "No ./public or ./app to deploy"; exit 1; }
          mkdir -p artifact
          tar -C "$LOCAL_PATH" -czf artifact/site.tgz .
          echo "path=artifact/site.tgz" >> "$GITHUB_OUTPUT"

      - name: Ensure artifacts bucket exists + upload artifact
        id: upload
        run: |
          set -e
          ACCOUNT_ID="$(aws sts get-caller-identity --query Account --output text)"
          BUCKET="ssg-examples-artifacts-${ACCOUNT_ID}-${AWS_REGION}"
          KEY="${{ env.ARTIFACT_PREFIX }}/${{ github.sha }}.tgz"

          echo "Using bucket: s3://$BUCKET"
          if ! aws s3api head-bucket --bucket "$BUCKET" 2>/dev/null; then
            echo "Bucket missing; creatingâ€¦"
            aws s3api create-bucket --bucket "$BUCKET" --region "$AWS_REGION" --create-bucket-configuration LocationConstraint="$AWS_REGION"
            aws s3api put-bucket-versioning --bucket "$BUCKET" --versioning-configuration Status=Enabled
            aws s3api put-public-access-block --bucket "$BUCKET" --public-access-block-configuration BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true
          fi

          echo "Uploading artifact..."
          aws s3 cp "${{ steps.pack.outputs.path }}" "s3://$BUCKET/$KEY"
          echo "bucket=$BUCKET" >> "$GITHUB_OUTPUT"
          echo "key=$KEY" >> "$GITHUB_OUTPUT"

      - name: Generate pre-signed URL
        id: presign
        run: |
          URL="$(aws s3 presign "s3://${{ steps.upload.outputs.bucket }}/${{ steps.upload.outputs.key }}" --expires-in 3600)"
          echo "url=${URL}" >> "$GITHUB_OUTPUT"

      - name: Resolve Instance ID (and show IP for info)
        id: inst
        run: |
          test -n "${{ secrets.EC2_INSTANCE_ID }}" || { echo "Missing EC2_INSTANCE_ID secret"; exit 1; }
          IID="${{ secrets.EC2_INSTANCE_ID }}"
          IP="$(aws ec2 describe-instances --region "${AWS_REGION}" --instance-ids "$IID" --query 'Reservations[0].Instances[0].PublicIpAddress' --output text || true)"
          echo "iid=${IID}" >> "$GITHUB_OUTPUT"
          echo "ip=${IP}"  >> "$GITHUB_OUTPUT"
          echo "Deploying to InstanceId: $IID (IP: $IP)"

      - name: Deploy via SSM (no SSH / no port 22)
        id: ssm
        run: |
          set -e
          IID="${{ steps.inst.outputs.iid }}"
          REMOTE_DIR="${{ env.REMOTE_DIR }}"
          PRESIGNED="${{ steps.presign.outputs.url }}"

          # 1) Build the script to run on the instance
          cat > run.sh <<'EOS'
          set -euo pipefail
          REMOTE_DIR="__REMOTE_DIR__"
          PRESIGNED="__PRESIGNED__"
          sudo mkdir -p "$REMOTE_DIR"
          TMP="/tmp/site.tgz"
          curl -fsSL "$PRESIGNED" -o "$TMP"
          TMPDIR="$(mktemp -d)"
          tar -xzf "$TMP" -C "$TMPDIR"
          if command -v rsync >/dev/null 2>&1; then
            sudo rsync -a --delete "$TMPDIR"/ "$REMOTE_DIR"/
          else
            sudo rm -rf "$REMOTE_DIR"/*; sudo cp -a "$TMPDIR"/. "$REMOTE_DIR"/
          fi
          sudo rm -rf "$TMPDIR" "$TMP"
          sudo chown -R ec2-user:ec2-user "$REMOTE_DIR"
          EOS

          # 2) Substitute variables safely, then base64 the script
          safe_url=$(printf '%s' "$PRESIGNED" | sed -e 's/[\/&]/\\&/g')
          sed -i "s|__REMOTE_DIR__|$REMOTE_DIR|g" run.sh
          sed -i "s|__PRESIGNED__|$safe_url|g" run.sh
          B64=$(base64 -w 0 < run.sh)

          # 3) Send SSM command using JSON (avoids quoting problems)
          cat > /tmp/ssm.json <<JSON
          {
            "DocumentName": "AWS-RunShellScript",
            "InstanceIds": ["$IID"],
            "Parameters": {
              "commands": ["echo $B64 | base64 -d | sudo bash -s"],
              "executionTimeout": ["600"],
              "workingDirectory": ["/home/ec2-user"]
            },
            "Comment": "ssg-examples deploy $GITHUB_SHA"
          }
          JSON

          CMD_ID=$(aws ssm send-command --cli-input-json file:///tmp/ssm.json --query "Command.CommandId" --output text)
          echo "CommandId: $CMD_ID"

          # 4) Poll for completion
          for i in $(seq 1 30); do
            STATUS="$(aws ssm get-command-invocation --command-id "$CMD_ID" --instance-id "$IID" --query Status --output text || true)"
            echo "SSM status: $STATUS"
            case "$STATUS" in
              Success) exit 0 ;;
              Failed|Cancelled|TimedOut)
                echo "SSM command $STATUS"
                echo "--- STDERR ---"
                aws ssm get-command-invocation --command-id "$CMD_ID" --instance-id "$IID" --query StandardErrorContent --output text || true
                echo "--- STDOUT ---"
                aws ssm get-command-invocation --command-id "$CMD_ID" --instance-id "$IID" --query StandardOutputContent --output text || true
                exit 1
                ;;
              *) sleep 5 ;;
            esac
          done
          echo "SSM command did not finish in time"; exit 1
