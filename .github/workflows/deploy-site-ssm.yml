name: Deploy site (SSM + SSGs)

on:
  push:
    branches: [ "main" ]
    paths:
      - 'app/**'
      - 'nginx/**'
      - '.github/workflows/deploy-site-ssm.yml'
  workflow_dispatch:

concurrency:
  group: deploy-site-ssm
  cancel-in-progress: false

jobs:
  diagnose:
    name: Diagnose secrets & environment
    runs-on: ubuntu-latest
    outputs:
      has_role: ${{ steps.chk.outputs.has_role }}
      has_bucket: ${{ steps.chk.outputs.has_bucket }}
      role_source: ${{ steps.chk.outputs.role_source }}
      region: ${{ steps.chk.outputs.region }}
      have_ec2_id: ${{ steps.chk.outputs.have_ec2_id }}
      have_ssm_id: ${{ steps.chk.outputs.have_ssm_id }}
    steps:
      - id: chk
        name: Check for required secrets (values not shown)
        env:
          ROLE1: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          ROLE2: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          BUCKET: ${{ secrets.ARTIFACT_S3_BUCKET }}
          REGION: ${{ secrets.AWS_REGION }}
          EC2ID: ${{ secrets.EC2_INSTANCE_ID }}
          SSMID: ${{ secrets.SSM_INSTANCE_ID }}
        run: |
          set -euo pipefail
          has_role=0; role_src=""
          if [ -n "${ROLE1:-}" ]; then has_role=1; role_src="AWS_ROLE_TO_ASSUME"; fi
          if [ "$has_role" = 0 ] && [ -n "${ROLE2:-}" ]; then has_role=1; role_src="AWS_OIDC_ROLE_ARN"; fi

          has_bucket=0
          [ -n "${BUCKET:-}" ] && has_bucket=1

          region="${REGION:-us-east-2}"

          have_ec2_id=0; [ -n "${EC2ID:-}" ] && have_ec2_id=1
          have_ssm_id=0; [ -n "${SSMID:-}" ] && have_ssm_id=1

          echo "has_role=$has_role"        >> "$GITHUB_OUTPUT"
          echo "has_bucket=$has_bucket"    >> "$GITHUB_OUTPUT"
          echo "role_source=$role_src"     >> "$GITHUB_OUTPUT"
          echo "region=$region"            >> "$GITHUB_OUTPUT"
          echo "have_ec2_id=$have_ec2_id"  >> "$GITHUB_OUTPUT"
          echo "have_ssm_id=$have_ssm_id"  >> "$GITHUB_OUTPUT"

          echo "──────────────── DIAGNOSIS ────────────────"
          echo "• Role secret present?         $has_role (source=$role_src)"
          echo "• Artifact S3 bucket present?  $has_bucket"
          echo "• Region (default if empty):   $region"
          echo "• EC2_INSTANCE_ID present?     $have_ec2_id"
          echo "• SSM_INSTANCE_ID present?     $have_ssm_id"
          if [ "$has_role" = 0 ] || [ "$has_bucket" = 0 ]; then
            echo "→ Deploy job will be SKIPPED (missing required secret)."
          else
            echo "→ Deploy job WILL run."
          fi
          echo "────────────────────────────────────────────"

  build:
    name: Build & package site
    runs-on: ubuntu-latest
    needs: diagnose
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # No root-level lockfile cache to avoid 'lockfile not found' noise
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Ruby (for Jekyll)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Setup Hugo (extended)
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: '0.128.2'
          extended: true

      - name: Build SSGs if present (under app/*)
        run: |
          set -euo pipefail
          BUILD_ROOT="__deploy_root"
          rm -rf "$BUILD_ROOT"; mkdir -p "$BUILD_ROOT"
          echo "▶ Copy root site from app/ → $BUILD_ROOT/"
          rsync -av --delete app/ "$BUILD_ROOT"/

          # Jekyll
          if [ -d "app/jekyll" ] && { [ -f "app/jekyll/_config.yml" ] || [ -f "app/jekyll/Gemfile" ]; }; then
            echo "▶ Building Jekyll..."
            pushd app/jekyll >/dev/null
            if [ -f Gemfile ]; then
              bundle install --path vendor/bundle
              JEKYLL_ENV=production bundle exec jekyll build -d "$GITHUB_WORKSPACE/$BUILD_ROOT/jekyll"
            else
              gem install jekyll bundler --no-document
              JEKYLL_ENV=production jekyll build -d "$GITHUB_WORKSPACE/$BUILD_ROOT/jekyll"
            fi
            popd >/dev/null
          else
            echo "ℹ️ app/jekyll not configured; keeping placeholder (if any)."
          fi

          # Hugo
          if [ -d "app/hugo" ] && ls app/hugo/config.* >/dev/null 2>&1; then
            echo "▶ Building Hugo..."
            pushd app/hugo >/dev/null
            hugo --destination "$GITHUB_WORKSPACE/$BUILD_ROOT/hugo"
            popd >/dev/null
          else
            echo "ℹ️ app/hugo not configured; keeping placeholder (if any)."
          fi

          # Eleventy
          if [ -d "app/eleventy" ] && { grep -q '"@11ty/eleventy"' app/eleventy/package.json 2>/dev/null || ls app/eleventy/.eleventy.* >/dev/null 2>&1; }; then
            echo "▶ Building Eleventy..."
            pushd app/eleventy >/dev/null
            if [ -f package-lock.json ]; then
              npm ci
            elif [ -f pnpm-lock.yaml ]; then
              npm i -g pnpm && pnpm i
            else
              npm install
            fi
            npx @11ty/eleventy --output "$GITHUB_WORKSPACE/$BUILD_ROOT/eleventy"
            popd >/dev/null
          else
            echo "ℹ️ app/eleventy not configured; keeping placeholder (if any)."
          fi

          # Astro
          if [ -d "app/astro" ] && grep -q '"astro"' app/astro/package.json 2>/dev/null; then
            echo "▶ Building Astro..."
            pushd app/astro >/dev/null
            if [ -f package-lock.json ]; then
              npm ci
            elif [ -f pnpm-lock.yaml ]; then
              npm i -g pnpm && pnpm i
            else
              npm install
            fi
            npx astro build --outDir "$GITHUB_WORKSPACE/$BUILD_ROOT/astro"
            popd >/dev/null
          else
            echo "ℹ️ app/astro not configured; keeping placeholder (if any)."
          fi

      - name: Package site
        run: |
          set -euo pipefail
          tar -czf site.tgz -C "__deploy_root" .
          ls -lh site.tgz

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: built-site
          path: site.tgz
          retention-days: 7

  deploy:
    name: Deploy to EC2 via SSM
    needs: [ diagnose, build ]
    # Gate with outputs from 'diagnose' (strings)
    if: ${{ needs.diagnose.outputs.has_role == '1' && needs.diagnose.outputs.has_bucket == '1' }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      # Map secrets into env (prefer your names; fallback to OIDC ARN)
      AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME || secrets.AWS_OIDC_ROLE_ARN || '' }}
      ARTIFACT_S3_BUCKET: ${{ secrets.ARTIFACT_S3_BUCKET || '' }}
      AWS_REGION: ${{ needs.diagnose.outputs.region }}
      # Instance selection: prefer EC2_INSTANCE_ID; fallback to SSM_INSTANCE_ID; else tag lookup.
      EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID || '' }}
      SSM_INSTANCE_ID: ${{ secrets.SSM_INSTANCE_ID || '' }}
      EC2_TAG_NAME: ssg-examples
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: built-site
          path: .

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload tarball to S3
        id: s3
        run: |
          set -euo pipefail
          KEY="deploys/${GITHUB_RUN_ID}/site.tgz"
          aws s3 cp site.tgz "s3://${ARTIFACT_S3_BUCKET}/${KEY}" --only-show-errors
          echo "key=${KEY}" >> "$GITHUB_OUTPUT"
          echo "Uploaded s3://${ARTIFACT_S3_BUCKET}/${KEY}"

      - name: Resolve target instance
        id: target
        run: |
          set -euo pipefail
          if [ -n "${EC2_INSTANCE_ID:-}" ]; then
            TGT="$EC2_INSTANCE_ID"
            echo "Using EC2_INSTANCE_ID secret."
          elif [ -n "${SSM_INSTANCE_ID:-}" ]; then
            TGT="$SSM_INSTANCE_ID"
            echo "Using SSM_INSTANCE_ID secret."
          else
            echo "Looking up instance by tag Name=${EC2_TAG_NAME}..."
            TGT="$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=${EC2_TAG_NAME}" "Name=instance-state-name,Values=running" \
              --query "Reservations[].Instances[].InstanceId" --output text | head -n1 || true)"
            [ -n "$TGT" ] || { echo "No running instance tagged Name=${EC2_TAG_NAME} found." >&2; exit 1; }
          fi
          echo "target=${TGT}" >> "$GITHUB_OUTPUT"

      - name: Ensure jq (for JSON params)
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi

      - name: Deploy via SSM (inline)
        env:
          ARTIFACT_KEY: ${{ steps.s3.outputs.key }}
          TARGET: ${{ steps.target.outputs.target }}
        run: |
          set -euo pipefail
          read -r -d '' REMOTE_SCRIPT <<'EOS'
          set -euo pipefail
          TMP="$(mktemp -d)"
          DEST="/usr/share/nginx/html"
          aws s3 cp "s3://${ARTIFACT_S3_BUCKET}/${ARTIFACT_KEY}" "$TMP/site.tgz"
          sudo mkdir -p "$DEST"
          sudo tar -xzf "$TMP/site.tgz" -C "$DEST"
          for d in jekyll hugo eleventy astro; do sudo mkdir -p "$DEST/$d"; done
          if command -v nginx >/dev/null 2>&1; then
            if sudo nginx -t; then sudo systemctl reload nginx || sudo nginx -s reload || true; fi
          fi
          rm -rf "$TMP"
          echo "Deployed to $DEST at $(date -u +%FT%TZ)"
          EOS
          jq -n --arg cmd "$REMOTE_SCRIPT" '{commands:[$cmd]}' > params.json
          aws ssm send-command \
            --instance-ids "$TARGET" \
            --document-name "AWS-RunShellScript" \
            --parameters file://params.json \
            --region "${AWS_REGION}" \
            --output text >/dev/null
