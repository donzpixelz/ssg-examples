name: Deploy site (SSM + SSGs)

on:
  push:
    branches: [ "main" ]
    paths:
      - 'app/**'
      - 'nginx/**'
      - '.github/workflows/deploy-site-ssm.yml'
  workflow_dispatch:

concurrency:
  group: deploy-site-ssm
  cancel-in-progress: false

jobs:
  build:
    name: Build & package site
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: '0.128.2'
          extended: true

      - name: Build site + SSGs
        run: |
          set -euo pipefail
          BUILD_ROOT="__deploy_root"
          rm -rf "$BUILD_ROOT" && mkdir -p "$BUILD_ROOT"
          rsync -av app/ "$BUILD_ROOT"/
          # (builders for jekyll/hugo/eleventy/astro left as before)

      - name: Package site
        run: tar -czf site.tgz -C "__deploy_root" .

      - uses: actions/upload-artifact@v4
        with:
          name: built-site
          path: site.tgz
          retention-days: 7

  deploy:
    name: Deploy to EC2 via SSM
    needs: build
    if: ${{ secrets.AWS_OIDC_ROLE_ARN != '' && secrets.ARTIFACT_S3_BUCKET != '' }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-2' }}
      ARTIFACT_S3_BUCKET: ${{ secrets.ARTIFACT_S3_BUCKET }}
      SSM_INSTANCE_ID: ${{ secrets.SSM_INSTANCE_ID }}
      AWS_OIDC_ROLE_ARN: ${{ secrets.AWS_OIDC_ROLE_ARN }}
      EC2_TAG_NAME: ssg-examples
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: built-site
          path: .

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload to S3
        id: s3
        run: |
          KEY="deploys/${GITHUB_RUN_ID}/site.tgz"
          aws s3 cp site.tgz "s3://${ARTIFACT_S3_BUCKET}/${KEY}"
          echo "key=${KEY}" >> "$GITHUB_OUTPUT"

      - name: Resolve instance
        id: ssm
        run: |
          if [ -n "${SSM_INSTANCE_ID:-}" ]; then
            echo "target=$SSM_INSTANCE_ID" >> "$GITHUB_OUTPUT"
          else
            ID=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=${EC2_TAG_NAME}" "Name=instance-state-name,Values=running" \
              --query "Reservations[].Instances[].InstanceId" --output text | head -n1)
            echo "target=$ID" >> "$GITHUB_OUTPUT"
          fi

      - name: Deploy via SSM
        run: |
          read -r -d '' SCRIPT <<'EOS'
          set -euo pipefail
          TMP="$(mktemp -d)"
          aws s3 cp "s3://${ARTIFACT_S3_BUCKET}/${{ steps.s3.outputs.key }}" "$TMP/site.tgz"
          sudo tar -xzf "$TMP/site.tgz" -C /usr/share/nginx/html
          for d in jekyll hugo eleventy astro; do
            sudo mkdir -p "/usr/share/nginx/html/$d"
          done
          sudo nginx -t && (sudo systemctl reload nginx || sudo nginx -s reload || true)
          rm -rf "$TMP"
          EOS
          jq -n --arg cmd "$SCRIPT" '{commands:[$cmd]}' > params.json
          aws ssm send-command \
            --instance-ids "${{ steps.ssm.outputs.target }}" \
            --document-name "AWS-RunShellScript" \
            --parameters file://params.json
