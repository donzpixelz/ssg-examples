name: Deploy site (/app) to Nginx (authoritative)

on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-2
  REMOTE_DIR: /var/www/ssg-examples/site
  ARTIFACT_PREFIX: ssg-examples/artifacts

permissions:
  id-token: write
  contents: read

jobs:
  deploy-site:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: ssg-examples-${{ github.run_id }}

      - name: Validate inputs
        shell: bash
        run: |
          set -euo pipefail
          test -d ./app && test -f ./app/index.html || { echo "::error::Missing ./app/index.html"; exit 1; }
          test -n "${{ secrets.EC2_INSTANCE_ID }}" || { echo "::error::Missing EC2_INSTANCE_ID"; exit 1; }
          echo "Inputs OK"

      - name: Package ./app (tar.gz)
        id: pack
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p artifact
          tar -C "./app" -czf artifact/site.tgz .
          echo "path=artifact/site.tgz" >> "$GITHUB_OUTPUT"

      - name: Ensure artifacts bucket exists + upload
        id: upload
        shell: bash
        run: |
          set -euo pipefail
          ACCOUNT_ID="$(aws sts get-caller-identity --query Account --output text)"
          BUCKET="ssg-examples-artifacts-${ACCOUNT_ID}-${AWS_REGION}"
          KEY="${{ env.ARTIFACT_PREFIX }}/${{ github.sha }}.tgz"
          if ! aws s3api head-bucket --bucket "$BUCKET" >/dev/null 2>&1; then
            aws s3api create-bucket --bucket "$BUCKET" --region "$AWS_REGION" --create-bucket-configuration LocationConstraint="$AWS_REGION"
            aws s3api put-bucket-versioning --bucket "$BUCKET" --versioning-configuration Status=Enabled
            aws s3api put-public-access-block --bucket "$BUCKET" --public-access-block-configuration BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true
          fi
          aws s3 cp "${{ steps.pack.outputs.path }}" "s3://$BUCKET/$KEY"
          echo "bucket=$BUCKET" >> "$GITHUB_OUTPUT"
          echo "key=$KEY"       >> "$GITHUB_OUTPUT"

      - name: Presign artifact
        id: presign
        shell: bash
        run: |
          set -euo pipefail
          URL="$(aws s3 presign "s3://${{ steps.upload.outputs.bucket }}/${{ steps.upload.outputs.key }}" --expires-in 3600)"
          echo "url=${URL}" >> "$GITHUB_OUTPUT"

      - name: Resolve instance info
        id: inst
        shell: bash
        run: |
          set -euo pipefail
          IID="${{ secrets.EC2_INSTANCE_ID }}"
          IP="$(aws ec2 describe-instances --region "${AWS_REGION}" --instance-ids "$IID" --query 'Reservations[0].Instances[0].PublicIpAddress' --output text || true)"
          echo "iid=${IID}" >> "$GITHUB_OUTPUT"
          echo "ip=${IP}"  >> "$GITHUB_OUTPUT"

      - name: Deploy via SSM (authoritative Nginx on :80 + sync ./app)
        id: ssm
        shell: bash
        run: |
          set -euo pipefail
          IID="${{ steps.inst.outputs.iid }}"
          PRESIGNED="${{ steps.presign.outputs.url }}"
          REMOTE_DIR="${{ env.REMOTE_DIR }}"

          # Build the remote script strictly with heredocs closed at column 0.
          cat > run.sh <<'EOS_REMOTE'
set -Eeuo pipefail
LOG="/tmp/ssg-deploy.log"
exec > >(tee -a "$LOG") 2>&1
echo "=== ssg-examples authoritative nginx deploy ==="; date -u

PRESIGNED="__PRESIGNED__"
REMOTE_DIR="__REMOTE_DIR__"

# 1) Free port 80
if systemctl is-active --quiet httpd; then
  echo "Stopping httpdâ€¦"; sudo systemctl stop httpd || true
fi
if command -v docker >/dev/null 2>&1 && sudo docker ps >/dev/null 2>&1; then
  CIDS="$(sudo docker ps --filter 'publish=80' -q || true)"
  [ -n "$CIDS" ] && { echo "Stopping containers on :80: $CIDS"; sudo docker stop $CIDS || true; }
fi

# 2) Install nginx
if ! command -v nginx >/dev/null 2>&1; then
  if command -v yum >/dev/null 2>&1; then sudo yum -y install nginx >/dev/null
  elif command -v dnf >/dev/null 2>&1; then sudo dnf -y install nginx >/dev/null
  elif command -v apt-get >/dev/null 2>&1; then sudo apt-get update -y >/dev/null && sudo apt-get install -y nginx >/dev/null
  fi
fi
sudo mkdir -p "$REMOTE_DIR" /etc/nginx/conf.d

# 3) Nginx default site
cat >/tmp/ssg-examples.conf <<'NGINX'
server {
  listen 80 default_server;
  listen [::]:80 default_server;
  server_name _;
  root __REMOTE_DIR__;
  index index.html;
  location / {
    try_files $uri $uri/ /index.html;
  }
}
NGINX
sudo mv /tmp/ssg-examples.conf /etc/nginx/conf.d/ssg-examples.conf
[ -f /etc/nginx/conf.d/default.conf ] && sudo rm -f /etc/nginx/conf.d/default.conf || true
sudo sed -i "s|__REMOTE_DIR__|$REMOTE_DIR|g" /etc/nginx/conf.d/ssg-examples.conf

# 4) Tools + sync
for pkg in curl tar rsync; do
  if ! command -v "$pkg" >/dev/null 2>&1; then
    if command -v yum >/dev/null 2>&1; then sudo yum -y install "$pkg" >/dev/null || true
    elif command -v dnf >/dev/null 2>&1; then sudo dnf -y install "$pkg" >/dev/null || true
    elif command -v apt-get >/dev/null 2>&1; then sudo apt-get update -y >/dev/null && sudo apt-get install -y "$pkg" >/dev/null || true
    fi
  fi
done
TMP="/tmp/site.tgz"; curl -fsSL "$PRESIGNED" -o "$TMP"
STAGE="$(mktemp -d)"; tar -xzf "$TMP" -C "$STAGE"
if command -v rsync >/dev/null 2>&1; then
  sudo rsync -a --delete "$STAGE"/ "$REMOTE_DIR"/
else
  sudo rm -rf "$REMOTE_DIR"/*; sudo cp -a "$STAGE"/. "$REMOTE_DIR"/
fi

# 5) Permissions, validate, restart
if id nginx >/dev/null 2>&1; then sudo chown -R nginx:nginx "$REMOTE_DIR" || true; fi
sudo nginx -t
sudo systemctl enable --now nginx
sudo systemctl restart nginx

# 6) Proof
echo "--- Deployed to $REMOTE_DIR ---"
ls -l "$REMOTE_DIR" | head -n 20 || true
[ -f "$REMOTE_DIR/index.html" ] && { echo "index.html head:"; head -n 10 "$REMOTE_DIR/index.html" || true; }
echo "--- curl localhost ---"
curl -fsS -H 'Cache-Control: no-cache' http://127.0.0.1/ | head -n 20 || true

# 7) Cleanup
sudo rm -rf "$STAGE" "$TMP"
echo "Done."
EOS_REMOTE

          # Fill in variables safely
          safe_url=$(printf '%s' "$PRESIGNED" | sed -e 's/[\/&]/\\&/g')
          sed -i "s|__PRESIGNED__|$safe_url|g" run.sh
          sed -i "s|__REMOTE_DIR__|$REMOTE_DIR|g" run.sh

          # Base64 for SSM
          if base64 --version >/dev/null 2>&1; then
            B64=$(base64 -w 0 < run.sh 2>/dev/null || base64 < run.sh)
          else
            B64=$(python3 - <<'PY' runsh="run.sh"
import base64,sys
sys.stdout.write(base64.b64encode(open("run.sh","rb").read()).decode())
PY
)
          fi

          cat > /tmp/ssm.json <<JSON
{
  "DocumentName": "AWS-RunShellScript",
  "InstanceIds": ["${{ steps.inst.outputs.iid }}"],
  "Parameters": {
    "commands": ["echo $B64 | base64 -d | sudo bash -s"],
    "executionTimeout": ["900"],
    "workingDirectory": ["/home/ec2-user"]
  },
  "Comment": "authoritative nginx deploy $GITHUB_SHA"
}
JSON

          CMD_ID=$(aws ssm send-command --cli-input-json file:///tmp/ssm.json --query "Command.CommandId" --output text)
          echo "SSM CommandId: $CMD_ID"

          for i in $(seq 1 40); do
            STATUS="$(aws ssm get-command-invocation --command-id "$CMD_ID" --instance-id "${{ steps.inst.outputs.iid }}" --query Status --output text || true)"
            echo "SSM status: $STATUS"
            case "$STATUS" in
              Success)
                echo "=== STDOUT (success) ==="
                aws ssm get-command-invocation --command-id "$CMD_ID" --instance-id "${{ steps.inst.outputs.iid }}" --query StandardOutputContent --output text || true
                exit 0 ;;
              Failed|Cancelled|TimedOut)
                echo "=== STDOUT ==="
                aws ssm get-command-invocation --command-id "$CMD_ID" --instance-id "${{ steps.inst.outputs.iid }}" --query StandardOutputContent --output text || true
                echo "=== STDERR ==="
                aws ssm get-command-invocation --command-id "$CMD_ID" --instance-id "${{ steps.inst.outputs.iid }}" --query StandardErrorContent --output text || true
                exit 1 ;;
              *) sleep 5 ;;
            esac
          done

          echo "SSM command did not finish in time"; exit 1

      - name: Print helpful links
        if: always()
        shell: bash
        run: |
          IP="${{ steps.inst.outputs.ip }}"
          echo "IP: $IP"
          if [ -n "$IP" ] && [ "$IP" != "None" ]; then
            echo "Open: http://$IP/?buster=$(date +%s)"
          fi
