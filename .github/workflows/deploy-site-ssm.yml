name: Deploy site (SSM + SSGs)

on:
  push:
    branches: [ "main" ]
    paths:
      - 'app/**'
      - 'nginx/**'
      - '.github/workflows/deploy-site-ssm.yml'
  workflow_dispatch:

concurrency:
  group: deploy-site-ssm
  cancel-in-progress: false

jobs:
  build:
    name: Build & package site
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Ruby (for Jekyll)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Setup Hugo (extended)
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: '0.128.2'
          extended: true

      - name: Build SSGs if present (under app/*)
        run: |
          set -euo pipefail
          BUILD_ROOT="__deploy_root"
          rm -rf "$BUILD_ROOT"
          mkdir -p "$BUILD_ROOT"

          echo "▶ Copy root site from app/ → $BUILD_ROOT/"
          rsync -av --delete app/ "$BUILD_ROOT"/

          # Jekyll: build if configured
          if [ -d "app/jekyll" ] && { [ -f "app/jekyll/_config.yml" ] || [ -f "app/jekyll/Gemfile" ]; }; then
            echo "▶ Building Jekyll..."
            pushd app/jekyll >/dev/null
            if [ -f Gemfile ]; then
              bundle install --path vendor/bundle
              JEKYLL_ENV=production bundle exec jekyll build -d "$GITHUB_WORKSPACE/$BUILD_ROOT/jekyll"
            else
              gem install jekyll bundler --no-document
              JEKYLL_ENV=production jekyll build -d "$GITHUB_WORKSPACE/$BUILD_ROOT/jekyll"
            fi
            popd >/dev/null
          else
            echo "ℹ️ app/jekyll not configured; keeping placeholder (if any)."
          fi

          # Hugo: build if configured
          if [ -d "app/hugo" ] && ls app/hugo/config.* >/dev/null 2>&1; then
            echo "▶ Building Hugo..."
            pushd app/hugo >/dev/null
            hugo --destination "$GITHUB_WORKSPACE/$BUILD_ROOT/hugo"
            popd >/dev/null
          else
            echo "ℹ️ app/hugo not configured; keeping placeholder (if any)."
          fi

          # Eleventy: build if configured
          if [ -d "app/eleventy" ] && { grep -q '"@11ty/eleventy"' app/eleventy/package.json 2>/dev/null || ls app/eleventy/.eleventy.* >/dev/null 2>&1; }; then
            echo "▶ Building Eleventy..."
            pushd app/eleventy >/dev/null
            if [ -f package-lock.json ]; then
              npm ci
            elif [ -f pnpm-lock.yaml ]; then
              npm i -g pnpm && pnpm i
            else
              npm install
            fi
            npx @11ty/eleventy --output "$GITHUB_WORKSPACE/$BUILD_ROOT/eleventy"
            popd >/dev/null
          else
            echo "ℹ️ app/eleventy not configured; keeping placeholder (if any)."
          fi

          # Astro: build if configured
          if [ -d "app/astro" ] && grep -q '"astro"' app/astro/package.json 2>/dev/null; then
            echo "▶ Building Astro..."
            pushd app/astro >/dev/null
            if [ -f package-lock.json ]; then
              npm ci
            elif [ -f pnpm-lock.yaml ]; then
              npm i -g pnpm && pnpm i
            else
              npm install
            fi
            npx astro build --outDir "$GITHUB_WORKSPACE/$BUILD_ROOT/astro"
            popd >/dev/null
          else
            echo "ℹ️ app/astro not configured; keeping placeholder (if any)."
          fi

      - name: Package site
        run: |
          set -euo pipefail
          tar -czf site.tgz -C "__deploy_root" .
          ls -lh site.tgz

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: built-site
          path: site.tgz
          retention-days: 7

  deploy:
    name: Deploy to EC2 via SSM
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ARTIFACT_S3_BUCKET: ${{ secrets.ARTIFACT_S3_BUCKET }}
      SSM_INSTANCE_ID: ${{ secrets.SSM_INSTANCE_ID }}
      AWS_OIDC_ROLE_ARN: ${{ secrets.AWS_OIDC_ROLE_ARN }}
      EC2_TAG_NAME: ssg-examples
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: built-site
          path: .

      - name: Verify required secrets & set defaults
        run: |
          set -euo pipefail
          [ -n "${ARTIFACT_S3_BUCKET:-}" ] || { echo "Missing ARTIFACT_S3_BUCKET secret."; exit 1; }
          [ -n "${AWS_OIDC_ROLE_ARN:-}" ] || { echo "Missing AWS_OIDC_ROLE_ARN secret."; exit 1; }
          echo "AWS_REGION=${AWS_REGION:-us-east-2}" >> "$GITHUB_ENV"
          echo "Using S3 bucket: ${ARTIFACT_S3_BUCKET}"

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload tarball to S3
        id: s3
        run: |
          set -euo pipefail
          KEY="deploys/${GITHUB_RUN_ID}/site.tgz"
          aws s3 cp site.tgz "s3://${ARTIFACT_S3_BUCKET}/${KEY}" --only-show-errors
          echo "key=${KEY}" >> "$GITHUB_OUTPUT"
          echo "Uploaded s3://${ARTIFACT_S3_BUCKET}/${KEY}"

      - name: Resolve target instance
        id: ssm
        run: |
          set -euo pipefail
          if [ -n "${SSM_INSTANCE_ID:-}" ]; then
            TARGET="$SSM_INSTANCE_ID"
            echo "Using SSM_INSTANCE_ID secret: $TARGET"
          else
            echo "Looking up instance by tag Name=${EC2_TAG_NAME}..."
            TARGET="$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=${EC2_TAG_NAME}" "Name=instance-state-name,Values=running" \
              --query "Reservations[].Instances[].InstanceId" --output text | head -n1)"
            [ -n "$TARGET" ] || { echo "No running instance tagged Name=${EC2_TAG_NAME} found."; exit 1; }
            echo "Resolved instance: $TARGET"
          fi
          echo "target=${TARGET}" >> "$GITHUB_OUTPUT"

      - name: Ensure jq (for JSON params)
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi

      - name: Deploy via SSM (inline, JSON-safe)
        env:
          ARTIFACT_KEY: ${{ steps.s3.outputs.key }}
          TARGET: ${{ steps.ssm.outputs.target }}
        run: |
          set -euo pipefail

          # Build the remote script (single string) safely
          read -r -d '' REMOTE_SCRIPT <<'EOS'
          set -euo pipefail
          TMP="$(mktemp -d)"
          DEST="/usr/share/nginx/html"
          ART_BUCKET="${ARTIFACT_S3_BUCKET}"
          ART_KEY="${ARTIFACT_KEY}"

          if ! command -v aws >/dev/null 2>&1; then
            echo "aws CLI not found on instance; cannot download from S3." >&2
            exit 1
          fi

          sudo mkdir -p "$DEST"
          aws s3 cp "s3://${ART_BUCKET}/${ART_KEY}" "$TMP/site.tgz"
          sudo tar -xzf "$TMP/site.tgz" -C "$DEST"

          for d in jekyll hugo eleventy astro; do
            sudo mkdir -p "$DEST/$d"
          done

          if command -v nginx >/dev/null 2>&1; then
            if sudo nginx -t; then
              sudo systemctl reload nginx || sudo nginx -s reload || true
            fi
          fi

          rm -rf "$TMP"
          echo "Deployed to $DEST at $(date -u +%FT%TZ)"
          EOS

          # Create JSON params file for SSM (avoids YAML/quote issues)
          jq -n --arg cmd "$REMOTE_SCRIPT" '{commands: [$cmd]}' > params.json

          aws ssm send-command \
            --instance-ids "$TARGET" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy ssg-examples $GITHUB_SHA" \
            --parameters file://params.json \
            --region "${AWS_REGION}" \
            --output text >/dev/null
