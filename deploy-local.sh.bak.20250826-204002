#!/usr/bin/env bash
# Local → GitHub → EC2 (SSH) full deploy
# 1) Push the ENTIRE local project TO your GitHub repo (Git respects .gitignore)
# 2) Deploy FROM LOCAL to the instance:
#      - mirror project → /opt/ssg-examples/repo   (respects .gitignore; no .git)
#      - sync app/     → /usr/share/nginx/html     (respects .gitignore)
#      - sync nginx/   → /etc/nginx/conf.d         (no logic baked here)
# 3) Test & reload nginx
# No tarballs/S3/Actions unless you remove “[skip ci]” from the message.

set -Eeuo pipefail

# Preserved from your previous script:
SSH_KEY="/Users/donwilson/.ssh/ssg-examples-key.pem"
EC2_IP="18.220.33.0"

# Paths
PROJECT_ROOT="$(pwd)"
APP_DIR="$PROJECT_ROOT/app"
NGINX_DIR="$PROJECT_ROOT/nginx"

REMOTE_REPO="/opt/ssg-examples/repo"
DOCROOT="/usr/share/nginx/html"
CONF_DIR="/etc/nginx/conf.d"

# Commit message; keep [skip ci] if you do NOT want GitHub Actions to run
MSG="${1:-site: local SSH full deploy [skip ci]}"

# --- 1) Push ENTIRE project TO GitHub (Git honors .gitignore) ---
BRANCH="$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo main)"
git add -A || true
if ! git diff --cached --quiet; then
  git commit -m "$MSG" || true
fi
git push origin "$BRANCH" || true

# --- 2) Deploy FROM LOCAL → instance via SSH/rsync ---
[ -f "$SSH_KEY" ] || { echo "❌ SSH key not found: $SSH_KEY"; exit 1; }
[ -n "$EC2_IP" ]  || { echo "❌ EC2_IP is empty"; exit 1; }

# Preflight on instance (no nginx edits here)
ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no ec2-user@"$EC2_IP" 'bash -se' <<'SSH'
set -Eeuo pipefail
if ! command -v rsync >/dev/null 2>&1; then
  if command -v yum >/dev/null 2>&1; then sudo yum install -y -q rsync >/dev/null
  elif command -v dnf >/dev/null 2>&1; then sudo dnf install -y -q rsync >/dev/null
  elif command -v apt-get >/dev/null 2>&1; then sudo apt-get update -y >/dev/null && sudo apt-get install -y rsync >/dev/null
  fi
fi
sudo mkdir -p /opt/ssg-examples/repo
sudo mkdir -p /usr/share/nginx/html
sudo mkdir -p /etc/nginx/conf.d
SSH

# Common rsync opts (sudo on remote)
RSYNC_SSH=( -e "ssh -i $SSH_KEY -o StrictHostKeyChecking=no" --rsync-path="sudo rsync" )
# Respect .gitignore everywhere we mirror/sync project files
FILTER=( --filter=':- .gitignore' )
# Never ship the .git dir or macOS junk
EXTRA_EXCLUDES=( --exclude ".git/" --exclude ".git/**" --exclude ".DS_Store" )

# (a) MIRROR WHOLE PROJECT to /opt/ssg-examples/repo (respect .gitignore; delete removed files)
rsync -az --delete "${FILTER[@]}" "${EXTRA_EXCLUDES[@]}" "${RSYNC_SSH[@]}" "$PROJECT_ROOT"/ ec2-user@"$EC2_IP":"$REMOTE_REPO"/

# (b) SITE: sync app/ → /usr/share/nginx/html (respect .gitignore; delete removed files)
if [ -d "$APP_DIR" ]; then
  rsync -az --delete "${FILTER[@]}" "${EXTRA_EXCLUDES[@]}" "${RSYNC_SSH[@]}" "$APP_DIR"/ ec2-user@"$EC2_IP":"$DOCROOT"/
fi

# (c) NGINX: sync nginx/ → /etc/nginx/conf.d (delete removed files)
if [ -d "$NGINX_DIR" ]; then
  rsync -az --delete "${EXTRA_EXCLUDES[@]}" "${RSYNC_SSH[@]}" "$NGINX_DIR"/ ec2-user@"$EC2_IP":"$CONF_DIR"/
fi

# --- 3) Test & reload nginx (no config logic in this script) ---
ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no ec2-user@"$EC2_IP" 'bash -se' <<'SSH'
set -Eeuo pipefail
BIN="/usr/sbin/nginx"
[ -x "$BIN" ] || BIN="$(command -v nginx || true)"
if [ -n "$BIN" ]; then
  sudo "$BIN" -t
  sudo systemctl reload nginx || sudo "$BIN" -s reload || true
fi
# Diagnostics (no SIGPIPE)
echo "--- DOCROOT TOP ---"
sudo ls -la /usr/share/nginx/html | sed -n '1,80p' || true
SSH

echo "✅ Local push → GitHub AND full local → instance sync complete → http://$EC2_IP/?buster=$(date +%s)"
