---
import BaseLayout from '../layouts/BaseLayout.astro';
import DigitalClock from '../components/DigitalClock.jsx';
import AnalogClock from '../components/AnalogClock.jsx';
import Counter from '../components/Counter.jsx';

const posts = (await Astro.glob('./posts/*.md'))
    .sort((a, b) => new Date(b.frontmatter.date) - new Date(a.frontmatter.date))
    .slice(0, 8);
---
<BaseLayout title="Astro Example · Home" description="A meaningful Astro homepage: what Astro is, why you'd use it, and how this demo is set up.">
    <section class="card">
        <h1>Astro Example</h1>
        <p><strong>Astro is a content-first static site builder</strong> that ships <em>zero JavaScript by default</em> and only hydrates interactive “islands” when you ask it to.</p>
    </section>

    <section class="card">
        <h2>What Astro is (quick)</h2>
        <ul>
            <li><strong>Islands architecture:</strong> hydrate only what needs JS.</li>
            <li><strong>Hydration directives:</strong> <code>client:load</code>, <code>client:visible</code>, <code>client:idle</code>.</li>
            <li><strong>Framework-agnostic:</strong> React/Vue/Svelte/Solid + Markdown.</li>
            <li><strong>Fast by default:</strong> minimal JS; great Core Web Vitals.</li>
        </ul>
    </section>

    <!-- React Examples -->
    <section class="card card--chip">
        <h2 class="text-light">React Examples</h2>

        <!-- Digital: full width -->
        <article class="chip-card">
            <h3 class="text-light">Digital (React)</h3>
            <DigitalClock client:visible />
        </article>

        <!-- Row: Analog + Counter -->
        <div class="react-grid">
            <article class="chip-card">
                <h3 class="text-light">Analog (React)</h3>
                <AnalogClock client:visible />
            </article>

            <article class="chip-card">
                <h3 class="text-light">Counter</h3>
                <Counter client:idle initial={0} />
            </article>
        </div>
    </section>

    <section class="card">
        <h2>Latest posts</h2>
        {posts.length === 0 ? (
                <p>No posts yet. Add one in <code>src/pages/posts/</code>, then rebuild.</p>
        ) : (
            posts.map(p => (
                    <div class="list-item">
                        <a href={p.url}><strong>{p.frontmatter.title}</strong></a>
                        {p.frontmatter.date && (
                                <small> — {new Date(p.frontmatter.date).toLocaleDateString(undefined, { month: 'short', day: 'numeric', year: 'numeric' })}</small>
                        )}
                    </div>
            ))
        )}
    </section>
</BaseLayout>

<style>
    /* space between stacked cards */
    .chip-card{ margin: .75rem 0 1rem }

    /* two-column row for Analog + Counter (stacks on small) */
    .react-grid{
        display:grid;
        grid-template-columns:1fr;
        gap:1rem;
    }
    @media (min-width:900px){
        .react-grid{ grid-template-columns:2fr 1fr; } /* Analog bigger than Counter */
    }
</style>
