---
import BaseLayout from '../layouts/BaseLayout.astro';
import DigitalClock from '../components/DigitalClock.jsx';
import AnalogClock from '../components/AnalogClock.jsx';
import Counter from '../components/Counter.jsx';

const posts = (await Astro.glob('./posts/*.md'))
    .sort((a, b) => new Date(b.frontmatter.date) - new Date(a.frontmatter.date))
    .slice(0, 8);
---
<BaseLayout title="Astro Example · Home" description="A meaningful Astro homepage: what Astro is, why you'd use it, and how this demo is set up.">
    <section class="card">
        <h1>Astro Example</h1>
        <p><strong>Astro is a content-first static site builder</strong> that ships <em>zero JavaScript by default</em> and only hydrates interactive “islands” when you ask it to.</p>
    </section>

    <section class="card">
        <h2>What Astro is (quick)</h2>
        <ul>
            <li><strong>Islands architecture:</strong> hydrate only what needs JS.</li>
            <li><strong>Hydration directives:</strong> <code>client:load</code>, <code>client:visible</code>, <code>client:idle</code>.</li>
            <li><strong>Framework-agnostic:</strong> React/Vue/Svelte/Solid + Markdown.</li>
            <li><strong>Fast by default:</strong> minimal JS; great Core Web Vitals.</li>
        </ul>
    </section>

    <!-- React section -->
    <section class="card card--chip react-wrap">
        <h2 class="text-light react-title">React Examples</h2>

        <!-- Digital (full width, centered) -->
        <article class="chip-card digital-block">
            <h3 class="text-light sr-only">Digital (React)</h3>
            <DigitalClock client:visible />
        </article>

        <!-- Two equal columns with identical inner padding and full-height divider -->
        <div class="react-grid">
            <article class="chip-card col">
                <div class="col-inner">
                    <h3 class="text-light col-title">Analog (React)</h3>
                    <div class="analog-wrap">
                        <AnalogClock client:visible />
                    </div>
                </div>
            </article>

            <article class="chip-card col">
                <div class="col-inner">
                    <!-- Counter renders Date/Chip (top half) + Counter (bottom half) -->
                    <Counter client:idle initial={0} />
                </div>
            </article>
        </div>
    </section>

    <section class="card">
        <h2>Latest posts</h2>
        {posts.length === 0 ? (
                <p>No posts yet. Add one in <code>src/pages/posts/</code>, then rebuild.</p>
        ) : (
            posts.map((p) => (
                    <div class="list-item">
                        <a href={p.url}><strong>{p.frontmatter.title}</strong></a>
                        {p.frontmatter.date && (
                                <small> — {new Date(p.frontmatter.date).toLocaleDateString(undefined, { month: 'short', day: 'numeric', year: 'numeric' })}</small>
                        )}
                    </div>
            ))
        )}
    </section>
</BaseLayout>

<style>
    /* ---- shared rhythm + sizes for perfect proportion ---- */
    .react-wrap{
        --rhythm: 12px;
        --gap-x: calc(var(--rhythm) * 1.5);
        --gap-y: calc(var(--rhythm) * 2);
        --colWidth: clamp(18rem, 46vw, 520px);
        --dividerColor: rgba(255,255,255,.35);
        --colTopPad: 12px;          /* exact same top pad for BOTH columns */
        --blockGap: calc(var(--rhythm) * 1); /* gap inside columns */
    }

    .react-title{ text-align:center; margin:0 0 calc(var(--rhythm) * 2) }
    .digital-block{ margin: calc(var(--rhythm) * 1.5) 0 calc(var(--rhythm) * 2.25); text-align:center }

    .react-grid{
        position:relative;
        display:grid;
        grid-template-columns:1fr;
        row-gap: var(--gap-y);
        column-gap: var(--gap-x);
        align-items:stretch;  /* force equal height */
    }
    @media (min-width:900px){
        .react-grid{ grid-template-columns:1fr 1fr }
        .react-grid::after{
            content:"";
            position:absolute;
            left:50%;
            top:0; bottom:0;                 /* FULL height of the grid area */
            transform:translateX(-1px);
            width:2px; border-radius:2px;
            background:var(--dividerColor);
        }
    }

    /* IDENTICAL inner wrapper on both sides: this sets the top baseline */
    .col-inner{
        display:flex; flex-direction:column; height:100%;
        padding-top: var(--colTopPad);
    }

    /* Left side */
    .col-title{ margin:0 0 var(--blockGap); text-align:center }
    .analog-wrap{ max-width:var(--colWidth); margin-inline:auto }

    /* a11y helper */
    .sr-only{
        position:absolute!important; width:1px; height:1px; padding:0; margin:-1px;
        overflow:hidden; clip:rect(0,0,0,0); white-space:nowrap; border:0;
    }
</style>
